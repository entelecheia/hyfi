[tool.poetry]
name = "hyfi"
version = "1.36.1"
description = "Hydra Fast Interface (Hydra and Pydantic based interface framework)"
authors = ["Young Joon Lee <entelecheia@hotmail.com>"]
license = "MIT"
homepage = "https://hyfi.entelecheia.ai"
repository = "https://github.com/entelecheia/hyfi"
readme = "README.md"
packages = [{ include = "hyfi", from = "src" }]

[tool.poetry.scripts]
hyfi = 'hyfi.__cli__:hyfi_main'
hyfi-run = 'hyfi.__click__:cli'

[tool.poetry.dependencies]
python = "^3.9, <3.13"
hydra-core = "^1.3.2"
hydra-colorlog = "^1.2.0"
pydantic = "^2.3.0"
pydantic-settings = "^2.0.1"
chardet = "<=5.2.0"
python-dotenv = "^1.0.0"
tqdm = "^4.64.1"
colorama = "^0.4.3"
pathspec = ">=0.9.0"
click = "<=8.1.7"
pyarrow = "<=15.0.2"
joblib = ">=1.2.0,<=1.3.2"
pandas = ">=1.5.3,<=2.2.1"
scipy = ">1.10.0,<=1.12.0"
matplotlib = "<=3.7.1"
numpy = ">=1.26.0,<=1.26.4"
gdown = "<=5.1.0"
datasets = ">=2.0.0,<=2.18.0"
cached-path = { version = "^1.6.2", optional = true }
ipython = { version = "<=8.12.2", optional = true }
ipython-autotime = { version = "^0.3.1", optional = true }
ipywidgets = { version = "^8.0.6", optional = true }
loky = { version = "^3.4.1", optional = true }
ray = { version = "^2.5.1", optional = true }
p-tqdm = { version = "^1.4.0", optional = true }
numba = { version = "^0.58.0", optional = true }

[tool.poetry.extras]
ipython = ["ipython", "ipython-autotime", "ipywidgets"]
cache = ["cached-path"]
all = [
    "cached-path",
    "ipython",
    "ipython-autotime",
    "ipywidgets",
    "loky",
    "ray",
    "p-tqdm",
    "numba",
]

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
python-semantic-release = "^7.33.1"
isort = "^5.12.0"
black = ">=23.0.0"
flake8 = "^6.0.0"
mypy = "^1.0.0"
flake8-pyproject = "^1.2.2"
pytest = "^7.2.1"
pytest-cov = "^4.0.0"
ipykernel = "^6.22.0"
flaky = "^3.7.0"
responses = "^0.23.1"
cryptography = "^42.0.4"

[tool.poe]
include = [".tasks.toml", ".tasks-extra.toml"]

[tool.black]
# 'extend-exclude' excludes files or directories in addition to the defaults
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
(
  _version.py
  | .refs
  | tests
  | docs
  | book
  | _build
  | node_modules
)
'''

[tool.isort]
profile = "black"
skip = [
    '_version.py',
    'node_modules',
    '_build',
    'config',
    'docs',
    'tests',
    'venv',
    '.copier-template',
    '.refs',
    "cpath",
]

[tool.flake8]
exclude = [
    "node_modules",
    "_build",
    "docs",
    'config',
    "tests",
    "venv",
    ".copier-template",
    ".refs",
    "cached_path",
]
ignore = ["E501", "W503"]
per-file-ignores = [
    '__init__.py:F401,F403',
    '_version.py:W292',
    '*:E501,E203',
    'notebook.py:F821,E501',
    'motion.py:W605,E501',
    'config.py:E704',
]

[tool.mypy]
namespace_packages = true
exclude = [
    "node_modules",
    "build",
    "_build",
    'config',
    "dist",
    "docs",
    "tests",
    "venv",
    ".copier-template",
    ".refs",
    "cpath",
]
# 3rd party import
ignore_missing_imports = true
# dynamic typing
disallow_any_unimported = false
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false
disallow_any_generics = false
disallow_subclassing_any = false
# platform
python_version = "3.8"
# untyped
disallow_untyped_calls = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
disallow_untyped_decorators = false
# None and Optional
no_implicit_optional = false
# Warnings
warn_return_any = false
warn_unreachable = true
# Misc
pretty = true

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-p no:cacheprovider" # deactivating pytest caching.

[tool.coverage.report]
exclude_lines = ['if __name__ == "__main__":']

[tool.commitizen]
name = "cz_conventional_commits"
version = "1.0.1"
tag_format = "v$version"

[tool.setuptools_scm]
write_to_template = '__version__ = "{version}"'
tag_regex = '^(?P<prefix>v)?(?P<version>[^\+]+)(?P<suffix>.*)?$'

[tool.semantic_release]
branch = "main"
version_variable = "src/hyfi/_version.py:__version__"
version_toml = "pyproject.toml:tool.poetry.version"
version_source = "tag"
commit_version_number = true                                    # required for version_source = "tag"
commit_subject = "chore(release): :rocket: {version} [skip ci]"
prerelease_tag = "rc"
major_on_zero = true
tag_commit = true
changelog_file = "CHANGELOG.md"
upload_to_repository = true
upload_to_release = true
build_command = "poetry build --no-cache"
hvcs = "github"                                                 # hosting version control system, gitlab is also supported

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
